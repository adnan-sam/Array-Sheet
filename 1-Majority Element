import java.util.HashMap;
import java.util.Map;

public class Majority_Sum {
    public static void main(String[] args)
    {
        //Test Cases--
//        int arr[]={3,1,2};
        int arr[]={3,1,2,3,3};
//        int arr[]={15, 3, 19, 1, 7, 11, 1, 7, 7};
        int ans=majority_sum(arr);
        if(ans==-1)
            System.out.println("There is no majority element present in the array");
        else
            System.out.println("The majority element in the array is : "+ans);
    }
    //Let's solve it using BruteForce Method ------ O[N^2]
    /**static int majority_sum(int[] arr)
    {
        int maj=arr[0]; //or we can also declare it as maj=arr[0];
        int count=1;
        int max_count=count;
        for(int i=0;i<arr.length;i++)
        {
            for(int j=i+1;j<arr.length;j++)
            {
                if(arr[i]==arr[j])
                    count++;
            }
            if(count>max_count)
            {
                maj=arr[i];
                max_count=count;
                count=0;
            }
        }
        System.out.println("Maximum count is : "+max_count);
        if(max_count>(arr.length/2))
            return maj;

        return -1;
    }**/

    //Let's solve it using Moore's Voting Algorithm
    static int majority_sum(int[] arr)
     {
     int maj=arr[0]; //Assuming that the first element is the majority element present
     int count=1;   // As we considered arr[0] as the majority element so the count is 1 for arr[0]
     for(int i=1;i<arr.length;i++)
     {
     if(arr[i]==maj)
     count++;
     else
     count--;
     //Will check whether count=0, if so then we'll consider the next element as the majority element
     if(count<=0)
     {
     maj=arr[i];
     count=1;
     }
     }
     //Will check whether the number is present more or not by traversing the whole array once again
     int count2=0;
     for(int i=0;i<arr.length;i++)
     {
     if(arr[i]==maj)
     count2++;
     }
     if(count2>(arr.length/2))
     return maj;

     return -1;
     }

    //Let's solve it with HashMap
    /**static int majority_sum(int[] arr)
    {
        Map<Integer,Integer> map = new HashMap<>();
        for(int i=0;i<arr.length;i++)
        {
            map.put(arr[i],map.getOrDefault(arr[i],0)+1);
            if(map.get(arr[i])>(arr.length/2));
            return arr[i];
        }
        return -1;
    }**/
}
